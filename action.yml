name: "Publish to Lunni"
description: TODO
author: "hello@aedge.dev"
branding:
  icon: "upload-cloud"
  color: "orange"

inputs:
  context:
    description: "Build's context is the set of files located in the specified PATH or URL"
    required: false
    default: "./"
  file:
    description: "Path to the Dockerfile"
    required: false
    default: "Dockerfile"
  image_name:
    description: "Image name (excluding registry). Defaults to {{ github.repository }}."
    required: false
    default: ""
  registry:
    description: "Docker registry. Defaults to ghcr.io."
    required: true
    default: "ghcr.io"
  username:
    description: "Docker username. Defaults to {{ github.actor }}."
    required: false
    default: "${{ github.actor }}"
  password:
    description: "Docker password. Set this to {{ secrets.GITHUB_TOKEN }} if publishing to GHCR."
    required: false
    default: ""
  lunni-webhook-url:
    description: "Lunni service webhook"
    required: false
    default: ""

  # https://github.com/docker/build-push-action/blob/master/action.yml -> inputs
  build-args:
    description: "List of build-time variables"
    required: false
  cache-from:
    description: "List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)"
    required: false
    default: type=gha
  cache-to:
    description: "List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)"
    required: false
    default: type=gha,mode=max
  platforms:
    description: "List of target platforms for build (e.g. linux/amd64,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,etc)"
    required: false
    default: "linux/amd64"
  provenance:
    description: "Generate provenance attestation for the build"
    required: false
  ssh:
    description: "List of SSH agent socket or keys to expose to the build"
    required: false
  tags:
    description: "List of tags: https://github.com/docker/metadata-action#tags-input"
    required: false
  flavor:
    description: "Defines a global behavior for tags: https://github.com/docker/metadata-action#flavor-input"
    required: false
  target:
    description: "Sets the target stage to build"
    required: false
    default: ""
  secrets:
    description: "List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)"
    required: false
  secret-files:
    description: "List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)"
    required: false
  docker-metadata-pr-head-sha:
    description: "Set to `true` to tag images with the PR HEAD SHA instead of the merge commit SHA within pull requests."
    required: false
    default: "false"

outputs:
  image:
    description: "Docker image name"
    value: ${{ inputs.registry }}/${{ steps.image_name.outputs.image_name }}
  tag:
    description: "Docker image tag"
    value: ${{ steps.tag.outputs.output }}
  metadata:
    description: "Docker image metadata"
    value: ${{ steps.get-metadata.outputs.metadata }}

runs:
  using: "composite"
  steps:
    - name: Set image name
      id: image_name
      shell: bash
      run: |
        if [ "${{ inputs.image_name }}" = "" ]; then
          echo 'image_name=${{ github.repository }}' >> "$GITHUB_OUTPUT"
        else
          echo 'image_name=${{inputs.image_name}}' >> "$GITHUB_OUTPUT"
        fi
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      env:
        # Annoyingly, docker computes the SHA tags independently of any checkout
        # action. This option tells this action to use the PR HEAD SHA during a
        # pull request. It will then use `github.event.pull_request.head.sha`
        # instead of the merge commit (`github.sha`). This is useful for folks
        # who want to avoid merge commits in their PRs (for hotfix workflows,
        # tag predictability, builds on merge-conflicts, etc).
        DOCKER_METADATA_PR_HEAD_SHA: ${{ inputs.docker-metadata-pr-head-sha }}
      with:
        # list of Docker images to use as base name for tags
        images: |
          ${{ inputs.registry }}/${{ steps.image_name.outputs.image_name }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=sha
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,format=long
          ${{ inputs.tags }}
        flavor: ${{ inputs.flavor }}
        labels: |
          org.opencontainers.image.source=https://github.com/${{ github.repository }}

    - name: 'Install jq 1.6'
      uses: dcarbone/install-jq-action@v1.0.1
      with:
        version: 1.6
        force: 'true'

    - uses: edwardgeorge/jq-action@main
      id: tag
      with:
        compact: true
        raw-output: true
        input: ${{ steps.meta.outputs.json }}
        script: '.tags | map(select(test("sha-\\w{8,}"))) | first | match("sha-\\w{8,}") | .string'

    # docker context must be created prior to setting up Docker Buildx
    # https://github.com/actions-runner-controller/actions-runner-controller/issues/893
    - name: Set up Docker Context for Buildx
      shell: bash
      id: buildx-context
      run: |
        docker context create buildx-context || true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        endpoint: buildx-context

    - name: Login
      uses: docker/login-action@v2
      if: ${{ contains(inputs.registry, '.amazonaws.com') || ( inputs.username != '' && inputs.password != '' ) }}
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v4
      id: docker-build-push-action
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.context }}/${{ inputs.file }}
        pull: true
        push: true
        ssh: ${{ inputs.ssh }}
        build-args: ${{ inputs.build-args }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        tags: ${{ steps.meta.outputs.tags }}
        target: ${{ inputs.target }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: ${{ inputs.platforms }}
        provenance: ${{ inputs.provenance }}
        secrets: ${{ inputs.secrets }}
        secret-files: ${{ inputs.secret-files }}

    - name: Update service on Lunni
      id: update-service
      if: ${{ ( inputs.lunni-webhook-url != '' ) }}
      shell: bash
      run: |
        curl --fail-with-body -X POST '${{ inputs.lunni-webhook-url }}'

    - name: Get Metadata
      id: get-metadata
      shell: bash
      run: |
        metadata=$(echo '${{ steps.docker-build-push-action.outputs.metadata }}' | jq -c)
        echo "metadata=$metadata" >> $GITHUB_OUTPUT
        echo "Docker image metadata: $metadata"
